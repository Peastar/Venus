@mixin prefix($declarations, $prefixes: ()) {
    @each $property, $value in $declarations {
        @each $prefix in $prefixes {
            #{'-' + $prefix + '-' + $property}: $value;
        }

        #{$property}: $value;
    }
}

@mixin font-face($family, $filepath, $name, $weight, $style) {
    @font-face {
        font-family: quote($family);
        src: url($filepath + 'eot/' + $name + '.eot'),
            url($filepath + 'eot/' + $name + '.eot?#iefix')
                format('embedded-opentype'),
            url($filepath + 'woff2/' + $name + '.woff2') format('woff2'),
            url($filepath + 'woff/' + $name + '.woff') format('woff'),
            url($filepath + 'ttf/' + $name + '.ttf') format('truetype');
        //url($filepath + "svg/" + $name  + ".svg#" + $name + "") format("svg");
        font-weight: $weight;
        font-style: $style;
    }
}

@function calculateRem($size) {
    $remSize: $size / 16px;

    @return $remSize * 1rem;
}

@mixin rem($size) {
    font-size: calculateRem($size);
}

@mixin font-size($size) {
    font-size: $size;

    @include rem($size);
}

@mixin inline-block() {
    display: -moz-inline-stack;
    display: inline-block;
    vertical-align: top;
    zoom: 1;
    *display: inline;
}

@mixin position($position, $args) {
    @each $o in top right bottom left {
        $i: index($args, $o);

        @if $i and
            $i +
            1 <=
            length($args) and
            type-of(nth($args, $i + 1)) ==

          number {
            #{$o}: nth($args, $i + 1);
        }
    }
    position: $position;
}

@mixin absolute($args: '') {
    @include position(absolute, $args);
}

@mixin fixed($args: '') {
    @include position(fixed, $args);
}

@mixin relative($args: '') {
    @include position(relative, $args);
}
